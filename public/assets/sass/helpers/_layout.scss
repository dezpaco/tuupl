/*
+++++++++++++++++++++++
+++ HELPERS: LAYOUT +++
+++++++++++++++++++++++
*/


//=======================================
// Break points
//=======================================

@function break-point($size) {
    @return ($size / $base_em) + em;
}


//=======================================
// Box sizing
//=======================================

@mixin box-sizing {
    @each $prefix in -moz-box, -webkit-box, box {
        #{$prefix}-sizing: border-box;
    }
}


//=======================================
// Media queries
//=======================================

@mixin mq($min: false, $max: false, $and: false) {
    @if $use-mq == false {
        @content;
    } @else {
        @if $min and $and == false {
            @media only screen and (min-width: break-point($min)) { @content };
        }

        @if $min and $and {
            @media only screen and (min-width: break-point($min)) and ($and) { @content };
        }

        @if $max and $and == false {
            @media only screen and (max-width: break-point($max)) { @content };
        }

        @if $max and $and {
            @media only screen and (max-width: break-point($max)) and ($and) { @content };
        }
    }
}


//=======================================
// Flex box
//=======================================

/*
 * Other values not set-up:
 * `flex-grow`, `flex-shrink`, `flex-basis`, `flex-flow` and `align-self`
 *
 * Read more: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */

@mixin align-content($arg: stretch) {
    @if $arg == flex-start {
        -ms-flex-line-pack: start;
    } @else if $arg == flex-end {
        -ms-flex-line-pack: end;
    } @else if $arg == baseline {
        -ms-flex-line-pack: $arg;
    } @else if $arg == space-between {
        -ms-flex-line-pack: justify;
    } @else if $arg == space-around {
        -ms-flex-line-pack: distribute;
    } @else if $arg == stretch {
        -ms-flex-line-pack: $arg;
    } @else {
        -ms-flex-content: center;
    }
    -webkit-align-content: $arg;
    align-content: $arg;
}

@mixin align-items($arg: stretch) {
    @if $arg == flex-start {
        -moz-box-align: start;
        -ms-flex-align: start;
        -webkit-box-align: start;
    } @else if $arg == flex-end {
        -moz-box-align: end;
        -ms-flex-align: end;
        -webkit-box-align: end;
    } @else if $arg == baseline {
        -moz-box-align: $arg;
        -ms-flex-align: $arg;
        -webkit-box-align: $arg;
    } @else if $arg == stretch {
        -moz-box-align: $arg;
        -ms-flex-align: $arg;
        -webkit-box-align: $arg;
    } @else {
        -moz-box-align: center;
        -ms-flex-align: center;
        -webkit-box-align: center;
    }
    -webkit-align-items: $arg;
    align-items: $arg;
}

@mixin flexbox {
    @each $prefix in -moz-box, -ms-flexbox, -webkit-box, -webkit-flex, flex {
        display: #{$prefix};
    }
}

@mixin flex($args: null) {
    @if $args == none {
        @each $prefix in -moz-box-flex, -ms-flex, -webkit-flex, flex {
            #{$prefix}: $args;
        }
        -webkit-box-flex: 0;
    } @else {
        @each $prefix in -moz-box-flex, -ms-flex, -webkit-box-flex, -webkit-flex, flex {
            #{$prefix}: $args;
        }
    }
}

@mixin flex-direction($arg: row) {
    -ms-flex-direction: $arg;
    @if $arg == row or column {
        -moz-box-direction: normal;
        -webkit-box-direction: normal;
    } @else if $arg == row-reverse or column-reverse {
        -moz-box-direction: reverse;
        -webkit-box-direction: reverse;
    }
    @if $arg == row {
        -webkit-box-orient: horizontal;
    } @else if $arg == column {
        -webkit-box-orient: vertical;
    }
    -webkit-flex-direction: $arg;
    flex-direction: $arg;
}

@mixin flex-wrap($arg: wrap) {
    @each $prefix in -ms-flex-wrap, -webkit-flex-wrap, flex-wrap {
        #{$prefix}: $arg;
    }
}

@mixin justify-content($arg: flex-start) {
    @if $arg == flex-start {
        -moz-box-pack: start;
        -ms-flex-pack: start;
        -webkit-box-pack: start;
    } @else if $arg == flex-end {
        -moz-box-pack: end;
        -ms-flex-pack: end;
        -webkit-box-pack: end;
    } @else if $arg == space-between {
        -moz-box-pack: justify;
        -ms-flex-pack: justify;
        -webkit-box-pack: justify;
    } @else if $arg == space-around {
        -moz-box-pack: justify;
        -ms-flex-pack: distribute;
        -webkit-box-pack: justify;
    } @else {
        -moz-box-pack: center;
        -ms-flex-pack: center;
        -webkit-box-pack: center;
    }
    -webkit-justify-content: $arg;
    justify-content: $arg;
}

@mixin order($arg: null) {
    @each $prefix in -moz-box-ordinal-group, -ms-flex-order, -webkit-box-ordinal-group, -webkit-order, order {
        #{$prefix}: $arg;
    }
}


//=======================================
// Page layout
//=======================================

%page-layout {
    padding-left: 4%;
    padding-right: 4%;

    @include mq($min: $break-devicemid) {
        margin-left: auto;
        margin-right: auto;
        width: 76%;
    }

    @include mq($min: $break-deviceupper) {
        width: 68%;
    }

    @include mq($min: $break-tablet) {
        width: 66%;
    }

    @include mq($min: $break-medium) {
        padding-left: 0;
        padding-right: 0;
        width: 684px;
    }
}
